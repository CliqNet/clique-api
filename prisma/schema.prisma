// File: schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-py"
  recursive_type_depth = 5
}

model UserSession {
  id                      String   @id @default(cuid())
  userId                  String
  token                   String   @unique
  expiresAt               DateTime
  createdAt               DateTime @default(now())
  ipAddress               String?
  userAgent               String?

  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model TokenBlacklist {
  id        String   @id @default(cuid())
  tokenJti  String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("token_blacklist")
}

// User
model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  username                String   @unique
  password                String
  firstName               String
  lastName                String
  avatar                  String?
  phone                   String?
  location                String?
  userType                UserType
  isActive                Boolean  @default(true)
  isVerified              Boolean  @default(false)
  emailVerificationToken  String?
  emailVerifiedAt         DateTime?
  passwordResetToken      String?
  passwordResetExpiresAt  DateTime?
  twoFactorEnabled        Boolean @default(false)
  twoFactorSecret         String?
  status                  AccountStatus @default(PENDING_VERIFICATION)
  createdAt               DateTime @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime @updatedAt
  lastLoginAt             DateTime?

  // Relationships
  creator                 CreatorProfile?
  company                 CompanyProfile?
  admin                   AdminProfile?
  roles                   UserRole[]

  // Activity tracking
  sessions                UserSession[]

  @@map("users")
}

// Creator Profile and Related Models
model CreatorProfile {
  id                          String            @id @default(cuid())
  userId                      String            @unique
  plan                        PlanType          @default(FREE)
  bio                         String?
  niche                       String[]
  totalFollowers              Int               @default(0)
  avgEngagement               Float             @default(0.0)
  isVerified                  Boolean           @default(false)
  createdAt                   DateTime          @default(now())
  updatedAt                   DateTime          @updatedAt

  // Relationships
  user                        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccounts              SocialAccount[]
  @@map("creator_profiles")
}


// Company Profile
model CompanyProfile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  companyName         String
  plan                PlanType @default(BASIC)
  industry            String
  website             String?
  description         String?
  logo                String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relationships
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccounts      SocialAccount[]

  @@map("company_profiles")
}

// Admin Profile
model AdminProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  role      AdminRole @default(MODERATOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}


model SocialAccount {
  id              String        @id @default(cuid())
  creatorId       String?
  companyId       String?
  userId          String 
  platform        SocialPlatform
  platformId      String        // Platform-specific user ID
  username        String
  expiresAt       DateTime?
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  status          ConnectionStatus @default(CONNECTED)
  statusUpdatedAt DateTime @default(now())

  // Enhanced token management
  accessToken     String
  refreshToken    String?
  scope           String?       // Permissions granted
  tokenType       String?       // Bearer, etc.
  lastRefreshed   DateTime?     // When token was last refreshed
  refreshAttempts Int @default(0) // Track failed refresh attempts
  isExpired       Boolean @default(false) // Manual expiry flag
  errorCount      Int @default(0) // Track API errors
  lastError       String?       // Last error message
  
  // Rate limiting
  dailyApiCalls   Int @default(0) // Track usage
  lastApiCall     DateTime?     // For rate limiting
  quotaResetAt    DateTime?     // When quota resets

  // Relationships
  creator     CreatorProfile? @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  company     CompanyProfile? @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([creatorId, platform])
  @@map("social_accounts")
}


model Webhook {
  id            String @id @default(cuid())
  platform      SocialPlatform
  eventType     String
  payload       Json
  processed     Boolean @default(false)
  createdAt     DateTime @default(now())
  
  @@map("webhooks")
}


model PlatformConfig {
  id              String @id @default(cuid())
  platform        SocialPlatform
  appId           String
  appSecret       String // Encrypted
  apiVersion      String?
  rateLimitPerHour Int
  rateLimitPerDay  Int?
  isActive        Boolean @default(true)
  createdAt       DateTime @default(now())
  
  @@unique([platform])
  @@map("platform_configs")
}



model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  permissions RolePermission[]
  users       UserRole[]
  
  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  resource    String // e.g., "campaign", "creator", "analytics"
  action      String // e.g., "create", "read", "update", "delete"
  roles       RolePermission[]
  
  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  
  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])
  
  @@id([userId, roleId])
  @@map("user_roles")
}

model OAuthState {
  id        String   @id @default(uuid())
  state     String   @unique
  userId    String
  platform  String
  createdAt DateTime @default(now())
}

// Enums
enum AccountStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  DEACTIVATED
}


enum UserType {
  CREATOR
  COMPANY
  ADMIN
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum PlanType {
  FREE
  BASIC
  PRO
}

enum SocialPlatform {
  INSTAGRAM
  FACEBOOK
  YOUTUBE
  TWITTER
  TIKTOK
  LINKEDIN
}

enum ConnectionStatus {
  CONNECTED
  TOKEN_EXPIRED
  RATE_LIMITED
  PERMISSION_REVOKED
  PLATFORM_ERROR
  MAINTENANCE
}