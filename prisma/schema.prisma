// File: schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-py"
  recursive_type_depth = 5
}

// User Management Models
model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  username                String   @unique
  password                String
  firstName               String
  lastName                String
  avatar                  String?
  userType                UserType
  isActive                Boolean  @default(true)
  isVerified              Boolean  @default(false)
  emailVerifiedAt         DateTime?
  passwordResetToken      String?
  passwordResetExpiresAt  DateTime?
  twoFactorEnabled        Boolean @default(false)
  twoFactorSecret         String?
  status                  AccountStatus @default(PENDING_VERIFICATION)
  createdAt               DateTime @default(now())
  deletedAt               DateTime?
  updatedAt               DateTime @updatedAt
  lastLoginAt             DateTime?

  // Relationships
  creator                 CreatorProfile?
  company                 CompanyProfile?
  admin                   AdminProfile?
  roles                   UserRole[]

  // Activity tracking
  sessions                UserSession[]

  @@map("users")
}

model UserSession {
  id                      String   @id @default(cuid())
  userId                  String
  token                   String   @unique
  expiresAt               DateTime
  createdAt               DateTime @default(now())
  ipAddress               String?
  userAgent               String?

  user                    User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// Creator Profile and Related Models
model CreatorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  plan        PlanType @default(FREE)
  bio         String?
  niche       String[]
  totalFollowers Int   @default(0)
  avgEngagement  Float @default(0.0)
  isVerified     Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("creator_profiles")
}


// Company Profile and Related Models
model CompanyProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  companyName String
  plan      PlanType   @default(BASIC)
  industry    String
  website     String?
  description String?
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("company_profiles")
}

// Admin Profile
model AdminProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  role      AdminRole @default(MODERATOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_profiles")
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  permissions RolePermission[]
  users       UserRole[]
  
  @@map("roles")
}

model Permission {
  id          String @id @default(cuid())
  name        String @unique
  resource    String // e.g., "campaign", "creator", "analytics"
  action      String // e.g., "create", "read", "update", "delete"
  roles       RolePermission[]
  
  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  
  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  userId String
  roleId String
  user   User @relation(fields: [userId], references: [id])
  role   Role @relation(fields: [roleId], references: [id])
  
  @@id([userId, roleId])
  @@map("user_roles")
}

// Enums
enum AccountStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
  DEACTIVATED
}


enum UserType {
  CREATOR
  COMPANY
  ADMIN
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

enum PlanType {
  FREE
  BASIC
  PRO
}